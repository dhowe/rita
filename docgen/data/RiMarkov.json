{
  "class": "RiMarkov",
  "fields": [],
  "statics": [
    {
      "name": "fromJSON",
      "example": "rm = RiMarkov.fromJSON(jsonData);",
      "description": "Creates a new model from one previously saved as JSON (JavaScript only)",
      "syntax": "RiMarkov.fromJSON(jsonData);",
      "parameters": [
        {
          "type": "String",
          "desc": "a JSON string containing the model"
        }
      ],
      "platform": "JavaScript",
      "returns": [
        {
          "type": "RiMarkov",
          "desc": "a newly created RiMarkov object"
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "addText",
      "example": "sample = \"One reason people lie is to achieve personal power.\";<br/>rm = new RiMarkov(3);<br/>rm.addText(sample);<br/> OR <br/>rm.addText(sentencesArray);",
      "description": "Loads text into the model. If a raw string is provided, it will be split into sentences (using RiTa.sentences(). If an array is provided, each string is treated as an individual sentence.",
      "syntax": "addText(text);<br/>addText(text, multiplier);",
      "parameters": [
        {
          "type": "String or String[]",
          "desc": "an array of sentences or the raw text to be split into sentences"
        },
        {
          "type": "int",
          "desc": "weighting for text (optional, default=1) "
        }
      ],
      "returns": [
        {
          "type": "RiMarkov",
          "desc": "this RiMarkov"
        }
      ]
    },
    {
      "name": "completions",
      "example": "result = rm.completions([ &#34;the&#34;,&#34;red&#34;]);<br/>&nbsp;<br/>result = rm.completions([ &#34;the&#34; ], [ &#34;red&#34;, &#34;ball&#34; ]);",
      "syntax": "completions(preArray);<br/>completions(preArray, postArray);",
      "description": "If only one array parameter is provided, this function returns all possible next words, ordered by probability, for the given array.<br/>&nbsp;<br/>If two arrays are provided, it returns an unordered list of possible words <i>w</i> that complete the n-gram consisting of: pre[0]...pre[k], <i>w</i>, post[k+1]...post[n].<br/><br/><pre>result = rm.completions([ &#34;the&#34; ], [ &#34;red&#34;, &#34;ball&#34; ]);</pre>will return all the single words that occur between 'the' and 'red ball' in the current model (assuming n > 3),e.g., [ 'round', 'big', 'bouncy']).<br/><br/>Note: For this operation to be valid, (pre.length + post.length) must be less than the model's n-factor, otherwise an error will be thrown.",
      "parameters": [
        {
          "type": "String[]",
          "desc": "pre"
        },
        {
          "type": "String[]",
          "desc": "post (optional)"
        }
      ],
      "returns": [
        {
          "type": "String[]",
          "desc": "an unordered list of possible next tokens"
        }
      ]
    },
    {
      "name": "generate",
      "example": "rm = new RiMarkov(3);<br/>rm.addText(sentences);<br/>sents = rm.generate(10);",
      "description": "Generates one or more sentences from the model.<br/>&nbsp;<br/>Note: multiple sentences generated by this method <em>will</em> follow the model across sentence boundaries; thus the following two calls are not equivalent:<br/>&nbsp;<br/><pre>results = markov.generate(10);</pre> &nbsp; &nbsp; and<br/><br/><pre>for (int i = 0; i < 10; i++) { <br>  results[i] = markov.generate(1);<br>}</pre><br/>The latter will create 10 sentences with no explicit relationship between one and the next; while the former will follow probabilities from one sentence to the next.<br/> <br/>",
      "syntax": "generate(num);",
      "parameters": [
        {
          "type": "int",
          "desc": "the number of sentences (optional, default=1)"
        },
        {
          "type": "Object<br>(or Map in Java)", 
          "desc": "<br>the options for generation (all optional)<br><br>{float} <b>options.temperature:</b><br>The temperature parameter acts as a knob to adjust the probability that input elements will be selected for the output. At higher values, infrequent words are more likely to be chosen, while at lower values the most frequent inputs are more likely to be output. If no value is provided, then tokens are chosen according to their relative frequency in the input.<br><br>Range: between 0 and positive infinity (excluding both)<br>Default: exactly mapped to frequencies in the input<br>Lower values move the highest-weighted output toward a probability of 1.0.<br>Higher values tend to even out all probabilities (toward random selection).<br><br>The temperature parameter functions similarly to its use with softmax in neural networks. See <a href=\"http://www.kasimte.com/2020/02/14/how-does-temperature-affect-softmax-in-machine-learning.html\">this page</a> for a more in-depth explanation.</em><br><br>{int} <b>options.minLength:</b><br>minimal length of the sentences, default=5 words<br><br>{int} <b>options.maxLength:</b><br>maximum length of the sentences, default=35 words<br><br>{boolean} <b>options.allowDuplicates:</b><br>if true, allows the result to contain duplicate sentences<br><br>{String or Array} <b>options.seed:</b><br>text from which the generation should start."
        }
      ],
      "returns": [
        {
          "type": "String[]",
          "desc": "the result"
        }
      ]
    },
    {
      "name": "probability",
      "example": "rm = new RiMarkov(3); <br/>rm.text(theText);<br/>rm.probability(\"the\");",
      "description": "Returns either the raw (unigram) probability for a single token in the model (0 if it does not exist) <br/>&nbsp;<br/>OR <br/>&nbsp;<br/>(for an array) the probability of obtaining a sequence of k tokens where k <= nFactor ,<br/>e.g., if nFactor = 3, then valid lengths for the data array are 1, 2 & 3.",
      "syntax": "probability(dataString);<br/>probability(dataArray);",
      "parameters": [
        {
          "type": "String OR String[]",
          "desc": "the string (or sequence) to search for"
        }
      ],
      "returns": [
        {
          "type": "float(when parameter is an array)<br>double(when parameter is a String object)",
          "desc": "probability from 0-1"
        }
      ]
    },
    {
      "name": "probabilities",
      "example": "rm = new RiMarkov(3); <br/>rm.loadText(theText);<br/>rm.probabilities([\"be\", \"thought\"]);",
      "description": "Returns the full set of possible next tokens as a map, given an array of tokens representing the path down the tree (with length less than n).<br/>&nbsp;<br/>Note: seed arrays of any size (>0) may be input, but only the last n-1 elements will be considered.   ",
      "syntax": "probabilities(pathString);<br/>probabilities(pathArray);<br>probabilities(pathString, temperature);<br>probabilities(pathArray, temperature);",
      "parameters": [
        {
          "type": "String OR String[]",
          "desc": "a single token or array of tokens (strings)"
        },
        {
          "type": "double",
          "desc": "temperature (optional)"
        }
      ],
      "returns": [
        {
          "type": "Object<br>(or Map in Java)",
          "desc": "An object (JS) or HashMap (Java) mapping words to probabilities"
        }
      ]
    },
    {
      "name": "size",
      "example": "rm = new RiMarkov(3);<br/>rm.addText(sentences); if (rm.size() > 10) { ... }",
      "description": "Returns the number of tokens currently in the model",
      "syntax": "rm.size();",
      "parameters": [],
      "returns": [
        {
          "type": "int",
          "desc": ""
        }
      ]
    },
    {
      "name": "toString",
      "example": "rm = new RiMarkov(3);<br/>rm.addText(sentences);<br/>s = rm.toString();",
      "description": "Returns a formatted version of this model",
      "syntax": "rm.toString();",
      "parameters": [],
      "returns": [
        {
          "type": "String",
          "desc": "the object as a String"
        }
      ]
    },
    {
      "name": "toJSON",
      "example": "rm = new RiMarkov(3);<br/>rm.addText(sentences);<br/>json = rm.toJSON();",
      "description": "Converts the model to a JSON-formatted string  (JavaScript only)",
      "syntax": "toJSON();",
      "parameters": [],
      "platform": "JavaScript",
      "returns": [
        {
          "type": "String",
          "desc": "JSON representation"
        }
      ]
    }
  ]
}